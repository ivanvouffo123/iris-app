import pandas as pd
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
import pickle
import base64 
from pathlib import Path

# Configuration de la page
st.set_page_config(
    page_title="Diabetes Analysis App",
    page_icon="üè•",
    layout="wide"
)

# Fonction pour charger le csv
@st.cache_data  # Mise en cache des donn√©es
def load_data(dataset):
    if isinstance(dataset, str):
        df = pd.read_csv(dataset)
    else:
        df = pd.read_csv(dataset)
    return df

# Fonction pour t√©l√©charger le csv
def filedownload(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="diabetes_predictions.csv">Download CSV File</a>'
    return href

# Chargement des images et donn√©es
try:
    st.sidebar.image('diabets.jpg', width=200)
except FileNotFoundError:
    st.sidebar.warning("Image 'diabets.jpg' non trouv√©e")

try:
    data = load_data('diabetes.csv')
except FileNotFoundError:
    st.error("Le fichier 'diabetes.csv' n'a pas √©t√© trouv√©. Veuillez v√©rifier le chemin du fichier.")
    data = None

def main():
    # Titre de l'application
    st.markdown(
        "<h1 style='text-align:center;color:#8B4513;'>Application d'Analyse du Diab√®te</h1>",
        unsafe_allow_html=True
    )
    
    st.markdown(
        "<h2 style='text-align:center;color:#A0522D;'>√âtude du diab√®te au Cameroun</h2>",
        unsafe_allow_html=True
    )

    # Menu sur le sidebar
    menu = ['Accueil', 'Analyse', 'Visualisation', 'Pr√©diction']
    choice = st.sidebar.selectbox('S√©lectionnez une section', menu)

    if choice == 'Accueil':
        left, middle, right = st.columns(3)
        with middle:
            try:
                st.image('vaccination.jpg', width=500)
            except FileNotFoundError:
                st.warning("Image 'vaccination.jpg' non trouv√©e")

        st.write("Cette application analyse les donn√©es sur le diab√®te avec des outils Python pour optimiser les d√©cisions")
        st.subheader('Informations sur le diab√®te')
        st.write("""
        Au Cameroun, la pr√©valence du diab√®te chez les adultes en zones urbaines est actuellement estim√©e 
        entre 6 et 8%, avec environ 80% des personnes vivant avec le diab√®te qui ne sont pas diagnostiqu√©es. 
        Selon les donn√©es de 2002, seul un quart des personnes diab√©tiques connues avaient un contr√¥le 
        ad√©quat de leur glyc√©mie. Le fardeau du diab√®te au Cameroun est non seulement √©lev√© mais augmente 
        rapidement, avec une multiplication par 10 de la pr√©valence sur 10 ans (1994-2004).
        """)

    elif choice == 'Analyse' and data is not None:
        st.subheader('Donn√©es sur le diab√®te')
        st.write(data.head())
        
        col1, col2 = st.columns(2)
        with col1:
            if st.checkbox('Afficher le r√©sum√© statistique'):
                st.write(data.describe())
        
        with col2:
            if st.checkbox('Afficher la matrice de corr√©lation'):
                fig, ax = plt.subplots(figsize=(10, 8))
                sns.heatmap(data.corr(), annot=True, cmap='coolwarm', ax=ax)
                st.pyplot(fig)

    elif choice == 'Visualisation' and data is not None:
        col1, col2 = st.columns(2)
        
        with col1:
            if st.checkbox('Distribution par √¢ge'):
                fig = plt.figure(figsize=(10, 6))
                sns.histplot(data=data, x='Age', bins=30)
                plt.title('Distribution des √¢ges')
                st.pyplot(fig)
        
        with col2:
            if st.checkbox('Glucose vs √Çge'):
                fig = plt.figure(figsize=(10, 6))
                sns.scatterplot(data=data, x='Glucose', y='Age', hue='Outcome')
                plt.title('Relation entre glucose et √¢ge')
                st.pyplot(fig)

    elif choice == 'Pr√©diction':
        st.subheader('Pr√©diction du diab√®te')
        
        uploaded_file = st.file_uploader('T√©l√©chargez votre fichier CSV', type=['csv'])

        if uploaded_file:
            df = load_data(uploaded_file)
            st.write("Donn√©es charg√©es :", df.head())

            try:
                with open('model_reg.pkl', 'rb') as file:
                    model = pickle.load(file)
                
                prediction = model.predict(df)
                pp = pd.DataFrame(prediction, columns=['Pr√©diction'])
                ndf = pd.concat([df, pp], axis=1)
                ndf['Pr√©diction'] = ndf['Pr√©diction'].map({0: 'Non diab√©tique', 1: 'Diab√©tique'})
                
                st.write("R√©sultats de la pr√©diction :")
                st.write(ndf)

                if st.button('T√©l√©charger les r√©sultats'):
                    st.markdown(filedownload(ndf), unsafe_allow_html=True)

            except FileNotFoundError:
                st.error("Le mod√®le n'a pas √©t√© trouv√©. Veuillez v√©rifier que 'model_reg.pkl' est pr√©sent.")
            except Exception as e:
                st.error(f"Une erreur s'est produite lors de la pr√©diction : {str(e)}")

if __name__ == '__main__':
    main()
